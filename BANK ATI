package ati;

import java.util.Scanner;

public class ATM {
    public static void main(String[] args){

        Scanner sc = new Scanner(System.in);

        Bank theBank = new Bank("Banku Tulan's financial Empire!");

        User aUser = theBank.addUser("Fabian", "Purwin", "1234");

        Account newAccount = new Account("Konto podstawowe", aUser,0, theBank);
        aUser.addAccount(newAccount);
        theBank.addAccount(newAccount);

        User curUser;
        while (true) {

            //stay in the login prompt until successful login
            curUser =ATM.mainMenuPrompt(theBank, sc);
            // stay in the main menu until user quits
            ATM.printUserMenu(curUser,sc);

        }
    }

    /**
     * Print the ATM's login menu
     * @param theBank   the Bank object whose accoun to use
     * @param sc        the Scanner obiect to use for user input
     * @return          the authorised user object
     */
    public static User mainMenuPrompt(Bank theBank, Scanner sc) {

        //initialise
        String userID;
        String pin;
        User authUser;

        //prompt the user for user ID/pin combo until a correct one is reached
        do {
            System.out.printf("\n\nWitaj w  %s\n\n", theBank.getName());
            System.out.print("Enter user ID: ");
            userID = sc.nextLine();
            System.out.print("Enter pin: ");
            pin = sc.nextLine();

            //try to get the user object corresponding o the ID and pin combo
            authUser = theBank.userLogin(userID, pin);
            if (authUser == null){
                System.out.println("Incorrect user ID/pin combination. " + "Please try again.");
            }

        }while(authUser == null);  // continue looping until successful login

        return authUser;

    }

    public static void printUserMenu(User theUser, Scanner sc){

        // print the summary of user's account
        theUser.printAccountsSummary();

        //init
        int choice;

        //user menu

        do {
            System.out.printf("Cześć %s, co chcialbys zrobic?\n", theUser.getFirstName());
            System.out.println(" 1) Pokaz historie transakcji");
            System.out.println(" 2) Wyplac pieniadze");
            System.out.println(" 3) Wplac pieniadze");
            System.out.println(" 4) Przelej pieniadze");
            System.out.println(" 5) Wyjdz");
            System.out.println();
            System.out.print("Twoj wybor: ...?\n");
            choice = sc.nextInt();

            if (choice < 1 || choice > 5) {
                System.out.println("Robisz to zle, wprowadz prawidlowy znak (1-5)");
            }
        } while(choice < 1 || choice > 5);

        //process the choice

        switch (choice) {

            case 1:
                ATM.showTransactionHistory(theUser, sc);
                break;
            case 2:
                ATM.withdrawFunds(theUser, sc);
                break;
            case 3:
                ATM.depositFunds(theUser, sc);
                break;
            case 4:
                ATM.transferFunds(theUser, sc);
                break;
            case 5:
                sc.nextLine();
                break;
            }

            // replay this menu until user want to quit
            if (choice != 5) {
                ATM.printUserMenu(theUser, sc);
            }
    }

    /**
     * Show the transaction history for an acc
     * @param theUser   the logged-in User Object
     * @param sc        the Scanner object used for user input
     */
    public static void showTransactionHistory(User theUser, Scanner sc) {

            int theAcct;

            do {
                System.out.printf("Podaj numer (1-%d) konta, ktorego transakcje chcesz zobaczyc: " , theUser.numAccounts());
                theAcct = sc.nextInt()-1;
                if (theAcct <0 || theAcct >= theUser.numAccounts()) {
                    System.out.println("Niewlasciwy nr konta, prosze podaj ponownie.");
                }

            } while (theAcct <0 || theAcct >= theUser.numAccounts());
                //print the transaction history
            theUser.printAcctTransHistory(theAcct);

        }

    /**
     * Process transferring funds from one acc to another
     * @param theUser   the logged-in Use object
     * @param sc        the Scanner object used for user input
     */
    public static void transferFunds(User theUser, Scanner sc) {
        //inits
        int fromAcct;
        int toAcct;
        double amount;
        double acctBal;

        //get the account to transfer from
        do {
            System.out.printf("Podaj numer (1-%d) konta, z ktorego chcesz wykonac transakcje: " , theUser.numAccounts());
            fromAcct = sc.nextInt()-1;
            if (fromAcct <0 || fromAcct >= theUser.numAccounts()) {
                System.out.println("Niewlasciwy nr konta, prosze podaj ponownie.");
            }

        } while (fromAcct <0 || fromAcct >= theUser.numAccounts());
        acctBal = theUser.getAcctBalance(fromAcct);

        //get the account to transfer to
        do {
            System.out.printf("Podaj numer (1-%d) konta, do ktorego chcesz wykonac transakcje: " , theUser.numAccounts());
            toAcct = sc.nextInt()-1;
            if (toAcct <0 || toAcct >= theUser.numAccounts()) {
                System.out.println("Niewlasciwy nr konta, prosze podaj ponownie.");
            }

        } while (toAcct <0 || toAcct >= theUser.numAccounts());

        // get the amount to transfer

        do {
            System.out.printf("Podaj ile chcesz przelac pieniedzy (max PLN%.02f): PLN " , acctBal);
            amount = sc.nextDouble();
            if (amount < 0) {
                System.out.println("Wielkosc przelewu musi byc wieksza od zera.");
            } else if (amount > acctBal) {
                System.out.printf("Wielkosc przelewu musi byc mniejsza od (max PLN%.02f): PLN " , acctBal);
            }
        } while (amount <0 || amount > acctBal);

        // finally, do the transfer
        theUser.addAcctTransaction(fromAcct, -1*amount, String.format("Przelano na konto: %s", theUser.getAcctUUID(toAcct)));
        theUser.addAcctTransaction(toAcct, amount, String.format("Przelano z konta: %s", theUser.getAcctUUID(fromAcct)));
    }

    public static void withdrawFunds (User theUser, Scanner sc) {
        //inits
        int fromAcct;
        double amount;
        double acctBal;
        String memo;

        //get the account to transfer from
        do {
            System.out.printf("Podaj numer (1-%d) konta, z ktorego chcesz wykonac transakcje: " , theUser.numAccounts());
            fromAcct = sc.nextInt()-1;
            if (fromAcct <0 || fromAcct >= theUser.numAccounts()) {
                System.out.println("Niewlasciwy nr konta, prosze podaj ponownie.");
            }

        } while (fromAcct <0 || fromAcct >= theUser.numAccounts());
        acctBal = theUser.getAcctBalance(fromAcct);

        do {
            System.out.printf("Podaj ile chcesz wyplacic (max PLN%.02f): PLN " , acctBal);
            amount = sc.nextDouble();
            if (amount < 0) {
                System.out.println("Wielkosc wyplaty musi byc wieksza od zera.");
            } else if (amount > acctBal) {
                System.out.printf("Wielkosc wyplaty musi byc mniejsza od (max PLN%.02f): PLN " , acctBal);
            }
        } while (amount <0 || amount > acctBal);

        // gobble up rest of previous input
        sc.nextLine();

        //get a memo
        System.out.println("Wpisz memo: ");
        memo = sc.nextLine();
        //do the withdraw
        theUser.addAcctTransaction(fromAcct, -1*amount, memo);

    }

    public static void depositFunds (User theUser, Scanner sc) {
        //inits
        int toAcct;
        double amount;
        double acctBal;
        String memo;

        //get the account to transfer from
        do {
            System.out.printf("Podaj numer (1-%d) konta, z ktorego chcesz wykonac transakcje: " , theUser.numAccounts());
            toAcct = sc.nextInt()-1;
            if (toAcct <0 || toAcct >= theUser.numAccounts()) {
                System.out.println("Niewlasciwy nr konta, prosze podaj ponownie.");
            }

        } while (toAcct <0 || toAcct >= theUser.numAccounts());
        acctBal = theUser.getAcctBalance(toAcct);

        do {
            System.out.printf("Podaj ile chcesz wplacic (max PLN%.02f): PLN " , acctBal);
            amount = sc.nextDouble();
            if (amount < 0) {
                System.out.println("Wielkosc wplaty musi byc wieksza od zera.");
            }
        } while (amount <0);

        // gobble up rest of previous input
        sc.nextLine();

        //get a memo
        System.out.println("Wpisz memo: ");
        memo = sc.nextLine();
        //do the deposit
        theUser.addAcctTransaction(toAcct, amount, memo);

    }

//THE END
}

package ati;

import java.util.ArrayList;
import java.util.Random;

public class Bank {


    private String name;

    private ArrayList<User> users;

    private ArrayList<Account> accounts;

    public Bank(String name) {
        this.name = name;
        this.users = new ArrayList<>();
        this.accounts = new ArrayList<Account>();
    }

    /**
     * Generate a new universally unique ID fot a user.
     * @return  the uuid
     */

    public String getNewUserUUID() {

        //initialise
        String uuid;
        Random rng = new Random();
        int len = 6;
        boolean nonUnique;

        //continue looping until we get a unique ID
        do {

            //generate the number
            uuid = "";
            for (int c = 0; c< len; c++) {
                uuid += ((Integer)rng.nextInt(10)).toString();
            }
                // check to make sure it's unique
            nonUnique = false;
            for (User u: this.users) {
                if (uuid.compareTo(u.getUUID()) == 0) {
                    nonUnique = true;
                    break;
                }
            }
        } while (nonUnique);

        return uuid;
    }

    /**
     * Generate a new universally unique ID fot an account.
     * @return  the uuid
     */
    public String getNewAccountUUID() {

        //initialise
        String uuid;
        Random rng = new Random();
        int len = 10;
        boolean nonUnique;

        //continue looping until we get a unique ID
        do {

            //generate the number
            uuid = "";
            for (int c = 0; c< len; c++) {
                uuid += ((Integer)rng.nextInt(10)).toString();
            }
            // check to make sure it's unique
            nonUnique = false;
            for (Account a: this.accounts) {
                if (uuid.compareTo(a.getUUID()) == 0) {
                    nonUnique = true;
                    break;
                }
            }
        } while (nonUnique);

        return uuid;
    }

    /**
     * Add an account
     * @param anAcct    the account to add
     */
    public void addAccount(Account anAcct) {
        this.accounts.add(anAcct);
    }

    /**
     * Create a new user of the bank
     * @param firstName the user's first name
     * @param lastName  the user's last name
     * @param pin       the user's pin
     * @return          the new User object
     */
    public User addUser(String firstName, String lastName, String pin) {
        //create a new User object and add it to our list
        User newUser = new User(firstName, lastName, pin, this);
        this.users.add(newUser);

        //create a saving account for user and add to USer and Bank account list
        Account newAccount = new Account("Savings", newUser, 0 ,this);
        //add to holder and bank list
        newUser.addAccount(newAccount);
        this.accounts.add(newAccount);
        return newUser;
    }

    /**
     * Get the User object associated with a particular userID and pin, if they are valid
     * @param userID    the UUID of the user to log in
     * @param pin       the pin of the user
     * @return          the User object, if the login is successful, or null, if it is not
     */
    public User userLogin(String userID, String pin){

        //search through list of users
        for (User u: this.users){
            //check user ID is correct
            if (u.getUUID().compareTo(userID) == 0 && u.validatePin(pin)){
                return u;
            }
        }
        // if we haven't found rhe user or have an incorrect pin
        return null;
    }

    /**
     * Get the name of the bank
     * @return the name of the bank
     */
    public String getName() {
    return this.name;
    }
}

package ati;


import java.util.Date;

public class Transaction {

    private double amount;
    private Date timestamp;

    private String memo;

    private Account inAccount;

    /**
     * Create a new transaction
     * @param amount        the amount transacted
     * @param inAccount     the account the transaction belong to
     */
    public Transaction(double amount, Account inAccount) {

        this.amount = amount;
        this.inAccount = inAccount;
        this.timestamp = new Date();
        this.memo = "";
    }

    /**
     * Create a new transaction
     * @param amount        the amount transacted
     * @param memo          the memo for transaction
     * @param inAccount      the account the transaction belong to
     */
    public Transaction(double amount, String memo, Account inAccount) {

        this(amount, inAccount);
        this.memo = memo;
    }

    public double getAmount() {
        return this.amount;
    }

    /**
     * Get the string summarizing the transaction
     * @return  the summary string
     */
    public String getSummaryline() {

        if (this.amount >= 0) {
            return String.format("%s : PLN%.02f : %s\n", this.timestamp.toString(), this.amount, this.memo);
        } else {
            return String.format("%s : PLN(%.02f) : %s\n", this.timestamp.toString(), -this.amount, this.memo);
        }
    }

//THE END
}


package ati;

import java.security.NoSuchAlgorithmException;
import java.util.ArrayList;
import java.security.MessageDigest;
public class User {

    private String firtsName;
    private String lastName;
    private String uuid;
    private byte pinHash[];
    private ArrayList<Account> accounts;


    /**
     * Create a new user
     * @param firtsName  the user's first name
     * @param lastName   the user's last name
     * @param pin        the user's account pin number
     * @param theBank    the Bank object that the user is a customer of
     */


    public User(String firtsName, String lastName, String pin, Bank theBank) {
        //set user's name
        this.firtsName = firtsName;
        this.lastName = lastName;

        // store the pin's MD5 hash, for security


        try {
            MessageDigest md = MessageDigest.getInstance("MD5");
            this.pinHash = md.digest(pin.getBytes());
        } catch (NoSuchAlgorithmException e) {
            System.err.println("error, caught NoSuchAlgorithmException");
            e.printStackTrace();
            System.exit(1);
        }

        //get a new, unique universal ID for the user
        this.uuid = theBank.getNewUserUUID();

        // create empty list of accounts
        this.accounts = new ArrayList<Account>();

        //print log message

        System.out.printf("New user %s, %s with ID %s created. \n", lastName, firtsName, this.uuid);

    }


    /**
     * Add an account for the user
     * @param anAcct    the account to add
     */
    public void addAccount(Account anAcct) {
        this.accounts.add(anAcct);
    }

    /**
     * Return the user's UUID
     * @return      the uuid
     */
    public String getUUID() {
        return this.uuid;
    }


    /**
     * Check whether a given pin matches the true User pin
     * @param aPin  the pin to check
     * @return      whether the pin is valid or not
     */
    public boolean validatePin(String aPin) {

        try {
            MessageDigest md = MessageDigest.getInstance("MD5");
            return MessageDigest.isEqual(md.digest(aPin.getBytes()), this.pinHash);
        } catch (NoSuchAlgorithmException e) {
            System.err.println("error, caught NoSuchAlgorithmException");
            e.printStackTrace();
            System.exit(1);
        }
        return false;
    }

    /**
     * Get request of first name
     * @return      return first name of authUser
     */
    public String getFirstName() {
        return this.firtsName;

    }

    /**
     * Print summaries for the accounts of this user.
     */
    public void printAccountsSummary() {
        System.out.printf("\n\n%s, oto Twoj wyciag konta\n", this.firtsName);
        for (int a = 0; a < this.accounts.size(); a++) {
            System.out.printf("  %d) %s", a+1, this.accounts.get(a).getSummaryLine());
        }
        System.out.println();

    }

    /**
     * Get the number of acc of the user
     * @return the no of acc
     */
    public int numAccounts() {
        return this.accounts.size();
    }

    public void printAcctTransHistory(int acctIdx) {
        this.accounts.get(acctIdx).printTransHistory();
    }

    /**
     * Get the balance of a particular account
     * @param acctIdx   the index of the acc to use
     * @return          the balance of the acc
     */
    public double getAcctBalance(int acctIdx) {
        return this.accounts.get(acctIdx).getBalance();
    }

    /**
     * Get the UUID of a particular account
     * @param acctIdx   the index of the acc to use
     * @return          the UUID of the account
     */
    public String getAcctUUID (int acctIdx){
        return this.accounts.get(acctIdx).getUUID();
    }

    public void addAcctTransaction(int acctIdx, double amount, String memo) {
        this.accounts.get(acctIdx).addTransaction(amount, memo);
    }


    //THE END
}

package ati;

import java.util.ArrayList;

public class Account {
    private String name;
    private String uuid;
    private User holder;
    private double balance;


    private ArrayList<Transaction> transactions;

    /**
     * Create a new Account
     * @param name      the name of the account
     * @param holder    the User object that holds this account
     * @param theBank   the bank that issues the account
     */
    public Account(String name, User holder,double balance, Bank theBank) {
        // set the account name and holder
        this.balance = balance;
        this.name = name;
        this.holder = holder;

        //get next account uuid

        this.uuid = theBank.getNewAccountUUID();

        //initialise transaction
        this.transactions = new ArrayList<Transaction>();


    }
    /**
     * Return account ID
     * @return      the uuid
     */
    public String getUUID() {
        return this.uuid;
    }

    public String getSummaryLine() {

        //get the account's balance
        this.balance = this.getBalance();

        //format the summary line, depending on the whether the balance is negative

        if (balance >= 0) {
            return String.format("%s : PLN%.02f : %s\n", this.uuid, balance, this.name);
        } else {
            return String.format("%s : PLN(%.02f) : %s\n", this.uuid, balance, this.name);
        }
    }

    public double getBalance() {

        double balance = 0;
        for (Transaction t: this.transactions) {

            balance =+ t.getAmount();
        }
        return balance;
    }

    /**
     * Print the transaction history of the acc
     */
    public void printTransHistory() {

        System.out.printf("\n Historia transakcji dla konta %s\n", this.uuid);
        for (int t = this.transactions.size()-1; t >= 0; t--) {
            System.out.printf(this.transactions.get(t).getSummaryline());
        }
        System.out.println();
    }

    /**
     * Add a new transaction in this account
     * @param amount    the amount transacted
     * @param memo      the transaction memo
     */
    public void addTransaction(double amount, String memo) {

        //create new transaction
        Transaction newTrans = new Transaction(amount, memo, this);
        this.transactions.add(newTrans);
    }
    //THE END
}



